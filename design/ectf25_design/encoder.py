"""
Author: Ben Janis
Date: 2025

This source file is part of an example system for MITRE's 2025 Embedded System CTF
(eCTF). This code is being provided only for educational purposes for the 2025 MITRE
eCTF competition, and may not meet MITRE standards for quality. Use this code at your
own risk!

Copyright: Copyright (c) 2025 The MITRE Corporation
"""

import argparse
import struct
import os
import json

from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
import hashlib
from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

class Encoder:

    frame_count = 0
    cw = None
    prev_ts = 9999
    IV = bytes.fromhex("ec32decad5e216f0d43618fce13e5040")

    private_key_pem = """
    -----BEGIN PRIVATE KEY-----
    YOUR_PRIVATE_KEY_HERE
    -----END PRIVATE KEY-----
    """

    signing_key = serialization.load_pem_private_key(
        private_key_pem.encode(),  # Convert string to bytes
        password=None,
        backend=default_backend()
    )

    signing_context = pkcs1_15.new(private_key)

    def __init__(self, secrets: bytes):
        """
        You **may not** change the arguments or returns of this function!

        :param secrets: Contents of the secrets file generated by
            ectf25_design.gen_secrets
        """
        # TODO: parse your secrets data here and run any necessary pre-processing to
        #   improve the throughput of Encoder.encode

        # Load the json of the secrets file
        secrets = json.loads(secrets)


        # Load the example secrets for use in Encoder.encode
        # This will be "EXAMPLE" in the reference design"
        self.some_secrets = secrets["keys"]

    def encode(self, channel: int, frame: bytes, timestamp: int) -> bytes:
        """The frame encoder function

        This will be called for every frame that needs to be encoded before being
        transmitted by the satellite to all listening TVs

        You **may not** change the arguments or returns of this function!

        :param channel: 16b unsigned channel number. Channel 0 is the emergency
            broadcast that must be decodable by all channels.
        :param frame: Frame to encode. Max frame size is 64 bytes.
        :param timestamp: 64b timestamp to use for encoding. **NOTE**: This value may
            have no relation to the current timestamp, so you should not compare it
            against the current time. The timestamp is guaranteed to strictly
            monotonically increase (always go up) with subsequent calls to encode

        :returns: The encoded frame, which will be sent to the Decoder
        """
        # TODO: encode the satellite frames so that they meet functional and
        #  security requirements

        if self.cw is None or timestamp//10000 > self.prev_ts:

            timestamp_mod_bytes = str(timestamp//10000).encode()
            time_salt = hashlib.sha256(timestamp_mod_bytes).digest()[:16]

            mixed_iv = bytes(a ^ b for a, b in zip(self.IV, time_salt))

            sk_hex = self.some_secrets.get(str(channel))
            sk = bytes.fromhex(sk_hex)

            self.cw = hashlib.pbkdf2_hmac('sha256',sk, mixed_iv, 1000, dklen=16)
            self.prev_ts=timestamp//10000

        self.frame_count+=1

        # Create new AES cipher object
        cipher = AES.new(self.cw, AES.MODE_ECB)

        # Ensure frame is padded to a multiple of 16 bytes (AES block size)
        padded_frame = pad(frame, AES.block_size)

        # Encrypt the frame
        encrypted_frame = cipher.encrypt(padded_frame)

        # Hash the encrypted frame and sign
        eframe_hash_obj = SHA256.new(encrypted_frame)
        eframe_signature = self.signing_context.sign(hash_obj)

        # Create the final frame that will be sent
        sgn_enc_frame = eframe_signature + encrypted_frame

        return struct.pack("<IQ", channel, timestamp) + sgn_enc_frame

def main():
    """A test main to one-shot encode a frame

    This function is only for your convenience and will not be used in the final design.

    After pip-installing, you should be able to call this with:
        python3 -m ectf25_design.encoder path/to/test.secrets 1 "frame to encode" 100
    """
    parser = argparse.ArgumentParser(prog="ectf25_design.encoder")
    parser.add_argument(
        "secrets_file", type=argparse.FileType("rb"), help="Path to the secrets file"
    )
    parser.add_argument("channel", type=int, help="Channel to encode for")
    parser.add_argument("frame", help="Contents of the frame")
    parser.add_argument("timestamp", type=int, help="64b timestamp to use")
    args = parser.parse_args()

    encoder = Encoder(args.secrets_file.read())
    print(repr(encoder.encode(args.channel, args.frame.encode(), args.timestamp)))


if __name__ == "__main__":
    main()
